package com.github.ajalt.clikt.completion

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.parameters.options.EagerOption

/**
 * [CompletionGenerator] for Bash.
 *
 * @author Laurent Pireyn
 */
object BashCompletionGenerator : CompletionGenerator {
    private data class OptionData(
        val name: String,
        val terminal: Boolean
    )

    private fun extractOptionsData(command: CliktCommand): Set<OptionData> =
        command._options.asSequence()
            .flatMap { option ->
                (option.names + option.secondaryNames).asSequence()
                    .map { name ->
                        name to option
                    }
            }
            .map { (name, option) ->
                OptionData(
                    name = name,
                    // TODO: Find a better way to determine if an option is terminal
                    terminal = option is EagerOption
                )
            }
            .toSet()

    override fun generateCompletion(command: CliktCommand): String {
        val commandName = command.commandName
        val funcName = commandName.replace('-', '_')
        val optionsData = extractOptionsData(command)
        val optionsNames = optionsData.asSequence()
            .map { (name, _) ->
                name
            }
            .joinToString(separator = " ")
        val terminalOptionsCase = optionsData.asSequence()
            .filter { (_, terminal) ->
                terminal
            }
            .map { (name, _) ->
                "'$name'"
            }
            .joinToString(separator = "|")
        return buildString {
            append("""
            |# Completion function for $commandName
            |# Generated by Clikt
            |_$funcName() {
            |    local cur prev w
            |
            """.trimMargin())
            if (terminalOptionsCase.isNotEmpty()) {
                append("""
                |    # Check for terminal option
                |    for w in "${'$'}{COMP_WORDS[@]}"; do
                |        case "${'$'}w" in
                |            $terminalOptionsCase)) return ;;
                |        esac
                |    done
                |
                """.trimMargin())
            }
            // TODO: Completion for options that take a value we can guess
            if (optionsNames.isNotEmpty()) {
                append("""
                |    _get_comp_words_by_ref cur prev
                |    if [[ "${'$'}cur" = -* ]]; then
                |        # Complete option
                |        COMPREPLY=(${'$'}(compgen -W '$optionsNames' -- "${'$'}cur"))
                |        return
                |    fi
                |
                """.trimMargin())
            }
            append("""
            |}
            |complete -F _$funcName $commandName
            """.trimMargin())
        }
    }
}
