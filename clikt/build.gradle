apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'org.jetbrains.dokka'
//apply plugin: 'maven'
//apply plugin: 'com.jfrog.bintray'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.2'
    }
}

kotlin {
    def runOnMac = System.getProperty("os.name") == "Mac OS X"
    targetFromPreset(presets.jvmWithJava, 'jvm')
    linuxX64('linux')
    mingwX64('win')
    if (runOnMac) {
        macosX64()
    }

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jvmTest {
            dependencies {
                implementation 'junit:junit:4.12'
                implementation 'io.kotlintest:kotlintest-assertions:3.3.2'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation 'com.github.stefanbirkner:system-rules:1.18.0'
                implementation 'com.google.jimfs:jimfs:1.1'
            }
        }
        test {
            // Not required, but helps IntelliJ configure inter-project dependencies:
            // https://youtrack.jetbrains.com/issue/KT-31179
            dependsOn jvmTest
        }
        configure([linuxMain, winMain]) {
            dependsOn commonMain
        }
        if (runOnMac) {
            configure(macosX64Main) {
                dependsOn linuxMain
            }
        }
    }
}

dokka {
    outputDirectory = "$rootDir/docs/api"
    outputFormat = 'gfm'

    impliedPlatforms = ["Common"]

    kotlinTasks {
        // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
        // use sourceRoot instead (see below)
        []
    }
    packageOptions {
        prefix = "com.github.ajalt.clikt"
        reportUndocumented = false // not everything needs a javadoc
    }
    sourceRoot {
        // assuming there is only a single source dir...
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    if (kotlin.sourceSets.getNames().contains("jvmMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
            platforms = ["JVM"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("linuxMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.linuxMain.kotlin.srcDirs[0]
            platforms = ["native"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("winMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.winMain.kotlin.srcDirs[0]
            platforms = ["native"]
        }
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
}

ext {
    pkgName = 'clikt'
    pkgDesc = 'Intuitive command line interface parsing for Kotlin'
    githubRepo = 'github.com/ajalt/clikt'
    pkgLicense = 'Apache-2.0'
    pkgLicenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    devInfo = {
        id 'ajalt'
        name 'AJ Alt'
        url 'https://github.com/ajalt'
    }
    bintrayUser = System.getenv('BINTRAY_USER')
    bintrayKey = System.getenv('BINTRAY_API_KEY')
    mavenUserToken = System.getenv('MAVEN_USER_TOKEN')
    mavenUserPass = System.getenv('MAVEN_USER_PASS')
    deployDryRun = false
}

// jvm
apply plugin: 'java-library'

kotlin.targets.matching { it.platformType.name == 'jvm' }.all { target ->
    target.project.sourceCompatibility = JavaVersion.VERSION_1_8
    target.project.targetCompatibility = JavaVersion.VERSION_1_8

    tasks['jar'].configure {
        manifest {
            attributes('Automatic-Module-Name': 'com.github.ajalt.clikt')
        }
    }
}

//apply from: "$rootDir/deploy.gradle"
